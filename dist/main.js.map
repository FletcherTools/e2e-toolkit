{"mappings":"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","sources":["src/index.ts","src/helpers.context.ts","src/inner/index.ts","src/inner/extend-config.helper.ts","src/inner/escape.helper.ts","src/inner/tag.decorator.ts","src/outer/url-matcher.helper.ts","src/outer/parse-custom-query.helper.ts"],"sourcesContent":["import { HelperContext, defaultHelperContext } from './helpers.context';\nimport { tagDecorator, extendConfig, escape } from './inner';\n\nimport { urlMatcherHelper } from './outer/url-matcher.helper';\nimport { parseCustomQuery } from './outer/parse-custom-query.helper';\n\nexport interface E2EHelpersConfig {\n    customSelectorPrefix?: string\n    pseudoSelectorPrefix?: string\n    pseudoSelectorMap?: Record<string, string>\n}\n\nexport function e2eHelpersFactory(config: E2EHelpersConfig) {\n    const mergedCtx: HelperContext = extendConfig(defaultHelperContext, {\n        customSelectorPrefix: config.customSelectorPrefix,\n        pseudoSelectorPrefix: config.pseudoSelectorPrefix,\n        pseudoSelectorMap: config.pseudoSelectorMap\n    });\n\n    const ctx: HelperContext = {\n        ...mergedCtx,\n        _customSelectorPrefixEscaped: escape(mergedCtx.customSelectorPrefix),\n        _pseudoSelectorPrefixEscaped: escape(mergedCtx.pseudoSelectorPrefix)\n    }\n\n    return {\n        r: tagDecorator(urlMatcherHelper, ctx),\n        q: tagDecorator(parseCustomQuery, ctx),\n    }\n}\n","export type HelperFunction = (this: HelperContext, ...args: any[]) => any\n\nexport interface HelperContext {\n    customSelectorAttr: string\n    customSelectorParamAttrPrefix: string\n    customSelectorPrefix: string\n    pseudoSelectorPrefix: string\n    pseudoSelectorMap: Record<string, string>\n    readonly _customSelectorPrefixEscaped: string\n    readonly _pseudoSelectorPrefixEscaped: string\n}\n\nexport const defaultHelperContext: HelperContext = {\n    customSelectorAttr: 'data-test-id',\n    customSelectorParamAttrPrefix: 'data-test-',\n    customSelectorPrefix: '%',\n    pseudoSelectorPrefix: '%%',\n    pseudoSelectorMap: {},\n    _customSelectorPrefixEscaped: '',\n    _pseudoSelectorPrefixEscaped: '',\n}\n","export * from './extend-config.helper';\nexport * from './escape.helper';\nexport * from './tag.decorator';\n","export function extendConfig<\n    T extends Record<keyof T, any>,\n    U extends Partial<T>\n>(config1: T, config2: U): T {\n    type C2KeyValueTuplet = [keyof T, T[keyof T]];\n\n    return (Object.entries(config2) as Array<C2KeyValueTuplet>)\n        .reduce(mergeReducer, { ...config1 } as T);\n\n    ///\n\n    function mergeReducer(config: T, [key, value]: C2KeyValueTuplet): T {\n        if (value !== undefined) {\n            config[key] = value;\n        }\n        return config;\n    }\n}\n","const charsToEscape = '.+*?^$()[]{}|\\\\';\n\nexport function escape(rawStr: string): string {\n    return rawStr.replaceAll(\n        new RegExp(`[${charsToEscape}]`, 'g'),\n        '\\\\$&'\n    )\n}\n","import { HelperFunction, HelperContext } from '../helpers.context';\n\ntype TagFunction<F extends HelperFunction> = (parts: TemplateStringsArray, values?: any[]) => ReturnType<F>;\ntype PlainFunction<F extends HelperFunction> = (values: Parameters<F>) => ReturnType<F>;\n\nexport function tagDecorator<F extends HelperFunction>\n  (fn: F, ctx: HelperContext): TagFunction<F> & PlainFunction<F> {\n  return function wrapper(...args): ReturnType<F> {\n    const [firstArg] = args;\n    const isTagFunction = (\n        Array.isArray(firstArg) &&\n        'raw' in firstArg\n    );\n\n    if (isTagFunction) {\n      const [parts, ...values] = args as [TemplateStringsArray, ...any[]];\n      const value = compileTemplateString(parts, values);\n      return fn.apply(ctx, [value]);\n    }\n\n    return fn.apply(ctx, args);\n  }\n}\n\n///\n\nfunction compileTemplateString(parts: TemplateStringsArray, values: any[] = []): string {\n  return parts.reduce(partsReducer, '');\n\n  function partsReducer(res: string, part: string, index: number) {\n    return res + part + (values[index] ?? '');\n  }\n}\n","import { HelperContext } from '../helpers.context';\n\nexport function urlMatcherHelper(this: HelperContext, urlPattern: string): RegExp {\n  const patternStr = urlPattern\n    .replace(/(^|\\/)\\*\\*(\\/|$)/g, '$1.+$2')\n    .replace('*', '[^/]+')\n    .replace(/:([a-z_]+)(?:<([^>]+)>)?/gi, paramsReplacer);\n\n  return new RegExp(`^${patternStr}$`);\n\n  ///\n\n  function paramsReplacer(match: string, name: string, rule: string): string {\n    const defaultRule = '[^/]+';\n    return `(?<${name}>${rule ?? defaultRule})`;\n  }\n}\n","import { HelperContext } from '../helpers.context';\n\nexport function parseCustomQuery(this: HelperContext, rawQuery: any): string {\n    const {\n        customSelectorAttr, customSelectorParamAttrPrefix,\n        customSelectorPrefix, _customSelectorPrefixEscaped,\n        pseudoSelectorPrefix, _pseudoSelectorPrefixEscaped,\n        pseudoSelectorMap\n    } = this;\n\n    if (typeof rawQuery !== 'string' ||\n        !rawQuery.includes(customSelectorPrefix) && !rawQuery.includes(pseudoSelectorPrefix)) {\n        return rawQuery;\n    }\n\n    const customSelectorRegExp = new RegExp(\n        `${_customSelectorPrefixEscaped}([a-z0-9_\\\\-]+)`,\n        'gi'\n    );\n\n    const customParamsRegExp = new RegExp(\n        `${_customSelectorPrefixEscaped}\\\\(([^)]+)\\\\)`,\n        'gi'\n    );\n\n    return (rawQuery.includes(pseudoSelectorPrefix) ? parsePseudoSelectors(rawQuery, pseudoSelectorMap) : rawQuery)\n        .replace(customSelectorRegExp, `[${customSelectorAttr}=\"$1\"]`)\n        .replace(customParamsRegExp, paramsReplacer);\n\n    ///\n\n    function parsePseudoSelectors(rawQuery: string, pseudoSelectorMap: Record<string, string>) {\n        const pseudoRegExp = new RegExp(\n            `${_pseudoSelectorPrefixEscaped}(?<pseudoSelector>[a-z0-9_\\-]+)(=(?<name>(\"[^\"]+\")|([a-z0-9_\\-]+)))?`,\n            'gi'\n        );\n\n        return rawQuery.replaceAll(pseudoRegExp, pseudoSelectorReplacer);\n\n        ///\n\n        function pseudoSelectorReplacer(...args: any[]) {\n            const groups = args.at(-1);\n            const {pseudoSelector, name} = groups;\n\n            if (name) {\n                const selector = pseudoSelectorMap[`${pseudoSelector}=$name`];\n                if (!selector) throw `Unknown pseudo-selector ${pseudoSelector}=$name`;\n                return selector.replace('$name', name);\n            }\n\n            const selector = pseudoSelectorMap[pseudoSelector];\n            if (!selector) throw `Unknown pseudo-selector ${pseudoSelector}`;\n            return pseudoSelectorMap[pseudoSelector];\n        }\n    }\n\n    function paramsReplacer(substring: string, paramsStr: string): string {\n        return paramsStr\n            .split(',')\n            .map(param => param.trim().split('='))\n            .reduce(paramsReducer, '');\n\n        ///\n\n        function paramsReducer(result: string, paramsTuple: string[]): string {\n            const [name, value] = paramsTuple;\n            return result + `[${customSelectorParamAttrPrefix}${name}=${value}]`\n        }\n    }\n\n}\n"],"names":[],"version":3,"file":"main.js.map"}